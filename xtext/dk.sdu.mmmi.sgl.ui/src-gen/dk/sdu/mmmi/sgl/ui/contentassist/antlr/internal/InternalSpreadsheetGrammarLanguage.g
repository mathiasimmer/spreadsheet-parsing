/*
* generated by Xtext
*/
grammar InternalSpreadsheetGrammarLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package dk.sdu.mmmi.sgl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package dk.sdu.mmmi.sgl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import dk.sdu.mmmi.sgl.services.SpreadsheetGrammarLanguageGrammarAccess;

}

@parser::members {
 
 	private SpreadsheetGrammarLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SpreadsheetGrammarLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleGrammar
entryRuleGrammar 
:
{ before(grammarAccess.getGrammarRule()); }
	 ruleGrammar
{ after(grammarAccess.getGrammarRule()); } 
	 EOF 
;

// Rule Grammar
ruleGrammar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGrammarAccess().getGroup()); }
(rule__Grammar__Group__0)
{ after(grammarAccess.getGrammarAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getAlternatives()); }
(rule__Element__Alternatives)
{ after(grammarAccess.getElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumn
entryRuleColumn 
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnAccess().getGroup()); }
(rule__Column__Group__0)
{ after(grammarAccess.getColumnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnDefinition
entryRuleColumnDefinition 
:
{ before(grammarAccess.getColumnDefinitionRule()); }
	 ruleColumnDefinition
{ after(grammarAccess.getColumnDefinitionRule()); } 
	 EOF 
;

// Rule ColumnDefinition
ruleColumnDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnDefinitionAccess().getAlternatives()); }
(rule__ColumnDefinition__Alternatives)
{ after(grammarAccess.getColumnDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMandatoryColumn
entryRuleMandatoryColumn 
:
{ before(grammarAccess.getMandatoryColumnRule()); }
	 ruleMandatoryColumn
{ after(grammarAccess.getMandatoryColumnRule()); } 
	 EOF 
;

// Rule MandatoryColumn
ruleMandatoryColumn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMandatoryColumnAccess().getGroup()); }
(rule__MandatoryColumn__Group__0)
{ after(grammarAccess.getMandatoryColumnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOptionalColumn
entryRuleOptionalColumn 
:
{ before(grammarAccess.getOptionalColumnRule()); }
	 ruleOptionalColumn
{ after(grammarAccess.getOptionalColumnRule()); } 
	 EOF 
;

// Rule OptionalColumn
ruleOptionalColumn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOptionalColumnAccess().getGroup()); }
(rule__OptionalColumn__Group__0)
{ after(grammarAccess.getOptionalColumnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnSpec
entryRuleColumnSpec 
:
{ before(grammarAccess.getColumnSpecRule()); }
	 ruleColumnSpec
{ after(grammarAccess.getColumnSpecRule()); } 
	 EOF 
;

// Rule ColumnSpec
ruleColumnSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnSpecAccess().getAlternatives()); }
(rule__ColumnSpec__Alternatives)
{ after(grammarAccess.getColumnSpecAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRowSpec
entryRuleRowSpec 
:
{ before(grammarAccess.getRowSpecRule()); }
	 ruleRowSpec
{ after(grammarAccess.getRowSpecRule()); } 
	 EOF 
;

// Rule RowSpec
ruleRowSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRowSpecAccess().getGroup()); }
(rule__RowSpec__Group__0)
{ after(grammarAccess.getRowSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockSpec
entryRuleBlockSpec 
:
{ before(grammarAccess.getBlockSpecRule()); }
	 ruleBlockSpec
{ after(grammarAccess.getBlockSpecRule()); } 
	 EOF 
;

// Rule BlockSpec
ruleBlockSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockSpecAccess().getGroup()); }
(rule__BlockSpec__Group__0)
{ after(grammarAccess.getBlockSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSyntax
entryRuleSyntax 
:
{ before(grammarAccess.getSyntaxRule()); }
	 ruleSyntax
{ after(grammarAccess.getSyntaxRule()); } 
	 EOF 
;

// Rule Syntax
ruleSyntax
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSyntaxAccess().getAlternatives()); }
(rule__Syntax__Alternatives)
{ after(grammarAccess.getSyntaxAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSyntaxSeq
entryRuleSyntaxSeq 
:
{ before(grammarAccess.getSyntaxSeqRule()); }
	 ruleSyntaxSeq
{ after(grammarAccess.getSyntaxSeqRule()); } 
	 EOF 
;

// Rule SyntaxSeq
ruleSyntaxSeq
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getSyntaxSeqAccess().getPartsAssignment()); }
(rule__SyntaxSeq__PartsAssignment)
{ after(grammarAccess.getSyntaxSeqAccess().getPartsAssignment()); }
)
(
{ before(grammarAccess.getSyntaxSeqAccess().getPartsAssignment()); }
(rule__SyntaxSeq__PartsAssignment)*
{ after(grammarAccess.getSyntaxSeqAccess().getPartsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Element__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getBlockParserRuleCall_0()); }
	ruleBlock
{ after(grammarAccess.getElementAccess().getBlockParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElementAccess().getRuleParserRuleCall_1()); }
	ruleRule
{ after(grammarAccess.getElementAccess().getRuleParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnDefinitionAccess().getMandatoryColumnParserRuleCall_0()); }
	ruleMandatoryColumn
{ after(grammarAccess.getColumnDefinitionAccess().getMandatoryColumnParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getColumnDefinitionAccess().getOptionalColumnParserRuleCall_1()); }
	ruleOptionalColumn
{ after(grammarAccess.getColumnDefinitionAccess().getOptionalColumnParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnSpec__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnSpecAccess().getRowSpecParserRuleCall_0()); }
	ruleRowSpec
{ after(grammarAccess.getColumnSpecAccess().getRowSpecParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getColumnSpecAccess().getBlockSpecParserRuleCall_1()); }
	ruleBlockSpec
{ after(grammarAccess.getColumnSpecAccess().getBlockSpecParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Syntax__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSyntaxAccess().getIs_idAssignment_0()); }
(rule__Syntax__Is_idAssignment_0)
{ after(grammarAccess.getSyntaxAccess().getIs_idAssignment_0()); }
)

    |(
{ before(grammarAccess.getSyntaxAccess().getIs_stringAssignment_1()); }
(rule__Syntax__Is_stringAssignment_1)
{ after(grammarAccess.getSyntaxAccess().getIs_stringAssignment_1()); }
)

    |(
{ before(grammarAccess.getSyntaxAccess().getIs_intAssignment_2()); }
(rule__Syntax__Is_intAssignment_2)
{ after(grammarAccess.getSyntaxAccess().getIs_intAssignment_2()); }
)

    |(
{ before(grammarAccess.getSyntaxAccess().getGroup_3()); }
(rule__Syntax__Group_3__0)
{ after(grammarAccess.getSyntaxAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getSyntaxAccess().getGroup_4()); }
(rule__Syntax__Group_4__0)
{ after(grammarAccess.getSyntaxAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Grammar__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grammar__Group__0__Impl
	rule__Grammar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Grammar__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarAccess().getLanguageKeyword_0()); }

	'language' 

{ after(grammarAccess.getGrammarAccess().getLanguageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Grammar__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grammar__Group__1__Impl
	rule__Grammar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Grammar__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarAccess().getNameAssignment_1()); }
(rule__Grammar__NameAssignment_1)
{ after(grammarAccess.getGrammarAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Grammar__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grammar__Group__2__Impl
	rule__Grammar__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Grammar__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getGrammarAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Grammar__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grammar__Group__3__Impl
	rule__Grammar__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Grammar__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarAccess().getRootAssignment_3()); }
(rule__Grammar__RootAssignment_3)
{ after(grammarAccess.getGrammarAccess().getRootAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Grammar__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grammar__Group__4__Impl
	rule__Grammar__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Grammar__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getGrammarAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Grammar__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grammar__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Grammar__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarAccess().getElementsAssignment_5()); }
(rule__Grammar__ElementsAssignment_5)*
{ after(grammarAccess.getGrammarAccess().getElementsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockKeyword_0()); }

	'block' 

{ after(grammarAccess.getBlockAccess().getBlockKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getNameAssignment_1()); }
(rule__Block__NameAssignment_1)
{ after(grammarAccess.getBlockAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__3__Impl
	rule__Block__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getColumnsAssignment_3()); }
(rule__Block__ColumnsAssignment_3)*
{ after(grammarAccess.getBlockAccess().getColumnsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Column__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getNameAssignment_0()); }
(rule__Column__NameAssignment_0)
{ after(grammarAccess.getColumnAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group__1__Impl
	rule__Column__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getMultipleAssignment_1()); }
(rule__Column__MultipleAssignment_1)?
{ after(grammarAccess.getColumnAccess().getMultipleAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group__2__Impl
	rule__Column__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getDefAssignment_2()); }
(rule__Column__DefAssignment_2)
{ after(grammarAccess.getColumnAccess().getDefAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getColumnAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MandatoryColumn__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MandatoryColumn__Group__0__Impl
	rule__MandatoryColumn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MandatoryColumn__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryColumnAccess().getEqualsSignKeyword_0()); }

	'=' 

{ after(grammarAccess.getMandatoryColumnAccess().getEqualsSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MandatoryColumn__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MandatoryColumn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MandatoryColumn__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryColumnAccess().getSpecAssignment_1()); }
(rule__MandatoryColumn__SpecAssignment_1)
{ after(grammarAccess.getMandatoryColumnAccess().getSpecAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OptionalColumn__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OptionalColumn__Group__0__Impl
	rule__OptionalColumn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalColumn__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalColumnAccess().getQuestionMarkEqualsSignKeyword_0()); }

	'?=' 

{ after(grammarAccess.getOptionalColumnAccess().getQuestionMarkEqualsSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OptionalColumn__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OptionalColumn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalColumn__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalColumnAccess().getSpecAssignment_1()); }
(rule__OptionalColumn__SpecAssignment_1)
{ after(grammarAccess.getOptionalColumnAccess().getSpecAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RowSpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RowSpec__Group__0__Impl
	rule__RowSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RowSpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRowSpecAccess().getColumnKeyword_0()); }

	'column' 

{ after(grammarAccess.getRowSpecAccess().getColumnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RowSpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RowSpec__Group__1__Impl
	rule__RowSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RowSpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRowSpecAccess().getHeaderAssignment_1()); }
(rule__RowSpec__HeaderAssignment_1)
{ after(grammarAccess.getRowSpecAccess().getHeaderAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RowSpec__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RowSpec__Group__2__Impl
	rule__RowSpec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RowSpec__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRowSpecAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getRowSpecAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RowSpec__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RowSpec__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RowSpec__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRowSpecAccess().getSyntaxAssignment_3()); }
(rule__RowSpec__SyntaxAssignment_3)
{ after(grammarAccess.getRowSpecAccess().getSyntaxAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BlockSpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockSpec__Group__0__Impl
	rule__BlockSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockSpecAccess().getBlockKeyword_0()); }

	'block' 

{ after(grammarAccess.getBlockSpecAccess().getBlockKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockSpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockSpecAccess().getKindAssignment_1()); }
(rule__BlockSpec__KindAssignment_1)
{ after(grammarAccess.getBlockSpecAccess().getKindAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Syntax__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Syntax__Group_3__0__Impl
	rule__Syntax__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Syntax__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSyntaxAccess().getTokenKeyword_3_0()); }

	'token' 

{ after(grammarAccess.getSyntaxAccess().getTokenKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Syntax__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Syntax__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Syntax__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSyntaxAccess().getTokenAssignment_3_1()); }
(rule__Syntax__TokenAssignment_3_1)
{ after(grammarAccess.getSyntaxAccess().getTokenAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Syntax__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Syntax__Group_4__0__Impl
	rule__Syntax__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Syntax__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSyntaxAccess().getRuleKeyword_4_0()); }

	'rule' 

{ after(grammarAccess.getSyntaxAccess().getRuleKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Syntax__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Syntax__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Syntax__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSyntaxAccess().getRuleAssignment_4_1()); }
(rule__Syntax__RuleAssignment_4_1)
{ after(grammarAccess.getSyntaxAccess().getRuleAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRuleKeyword_0()); }

	'rule' 

{ after(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNameAssignment_1()); }
(rule__Rule__NameAssignment_1)
{ after(grammarAccess.getRuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getRuleAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getAlternativesAssignment_3()); }
(rule__Rule__AlternativesAssignment_3)
{ after(grammarAccess.getRuleAccess().getAlternativesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getGroup_4()); }
(rule__Rule__Group_4__0)*
{ after(grammarAccess.getRuleAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getRuleAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Rule__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_4__0__Impl
	rule__Rule__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getVerticalLineKeyword_4_0()); }

	'|' 

{ after(grammarAccess.getRuleAccess().getVerticalLineKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getAlternativesAssignment_4_1()); }
(rule__Rule__AlternativesAssignment_4_1)
{ after(grammarAccess.getRuleAccess().getAlternativesAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Grammar__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getGrammarAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Grammar__RootAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarAccess().getRootBlockCrossReference_3_0()); }
(
{ before(grammarAccess.getGrammarAccess().getRootBlockIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getGrammarAccess().getRootBlockIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getGrammarAccess().getRootBlockCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Grammar__ElementsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarAccess().getElementsElementParserRuleCall_5_0()); }
	ruleElement{ after(grammarAccess.getGrammarAccess().getElementsElementParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBlockAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__ColumnsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getColumnsColumnParserRuleCall_3_0()); }
	ruleColumn{ after(grammarAccess.getBlockAccess().getColumnsColumnParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Column__MultipleAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getMultipleAsteriskKeyword_1_0()); }
(
{ before(grammarAccess.getColumnAccess().getMultipleAsteriskKeyword_1_0()); }

	'*' 

{ after(grammarAccess.getColumnAccess().getMultipleAsteriskKeyword_1_0()); }
)

{ after(grammarAccess.getColumnAccess().getMultipleAsteriskKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Column__DefAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getDefColumnDefinitionParserRuleCall_2_0()); }
	ruleColumnDefinition{ after(grammarAccess.getColumnAccess().getDefColumnDefinitionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MandatoryColumn__SpecAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryColumnAccess().getSpecColumnSpecParserRuleCall_1_0()); }
	ruleColumnSpec{ after(grammarAccess.getMandatoryColumnAccess().getSpecColumnSpecParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalColumn__SpecAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalColumnAccess().getSpecColumnSpecParserRuleCall_1_0()); }
	ruleColumnSpec{ after(grammarAccess.getOptionalColumnAccess().getSpecColumnSpecParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RowSpec__HeaderAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRowSpecAccess().getHeaderSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getRowSpecAccess().getHeaderSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RowSpec__SyntaxAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRowSpecAccess().getSyntaxSyntaxParserRuleCall_3_0()); }
	ruleSyntax{ after(grammarAccess.getRowSpecAccess().getSyntaxSyntaxParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSpec__KindAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockSpecAccess().getKindBlockCrossReference_1_0()); }
(
{ before(grammarAccess.getBlockSpecAccess().getKindBlockIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getBlockSpecAccess().getKindBlockIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getBlockSpecAccess().getKindBlockCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Syntax__Is_idAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSyntaxAccess().getIs_idIDENTIFIERKeyword_0_0()); }
(
{ before(grammarAccess.getSyntaxAccess().getIs_idIDENTIFIERKeyword_0_0()); }

	'IDENTIFIER' 

{ after(grammarAccess.getSyntaxAccess().getIs_idIDENTIFIERKeyword_0_0()); }
)

{ after(grammarAccess.getSyntaxAccess().getIs_idIDENTIFIERKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Syntax__Is_stringAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSyntaxAccess().getIs_stringSTRINGKeyword_1_0()); }
(
{ before(grammarAccess.getSyntaxAccess().getIs_stringSTRINGKeyword_1_0()); }

	'STRING' 

{ after(grammarAccess.getSyntaxAccess().getIs_stringSTRINGKeyword_1_0()); }
)

{ after(grammarAccess.getSyntaxAccess().getIs_stringSTRINGKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Syntax__Is_intAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSyntaxAccess().getIs_intINTEGERKeyword_2_0()); }
(
{ before(grammarAccess.getSyntaxAccess().getIs_intINTEGERKeyword_2_0()); }

	'INTEGER' 

{ after(grammarAccess.getSyntaxAccess().getIs_intINTEGERKeyword_2_0()); }
)

{ after(grammarAccess.getSyntaxAccess().getIs_intINTEGERKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Syntax__TokenAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSyntaxAccess().getTokenSTRINGTerminalRuleCall_3_1_0()); }
	RULE_STRING{ after(grammarAccess.getSyntaxAccess().getTokenSTRINGTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Syntax__RuleAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSyntaxAccess().getRuleRuleCrossReference_4_1_0()); }
(
{ before(grammarAccess.getSyntaxAccess().getRuleRuleIDTerminalRuleCall_4_1_0_1()); }
	RULE_ID{ after(grammarAccess.getSyntaxAccess().getRuleRuleIDTerminalRuleCall_4_1_0_1()); }
)
{ after(grammarAccess.getSyntaxAccess().getRuleRuleCrossReference_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__AlternativesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getAlternativesSyntaxSeqParserRuleCall_3_0()); }
	ruleSyntaxSeq{ after(grammarAccess.getRuleAccess().getAlternativesSyntaxSeqParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__AlternativesAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getAlternativesSyntaxSeqParserRuleCall_4_1_0()); }
	ruleSyntaxSeq{ after(grammarAccess.getRuleAccess().getAlternativesSyntaxSeqParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SyntaxSeq__PartsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSyntaxSeqAccess().getPartsSyntaxParserRuleCall_0()); }
	ruleSyntax{ after(grammarAccess.getSyntaxSeqAccess().getPartsSyntaxParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


