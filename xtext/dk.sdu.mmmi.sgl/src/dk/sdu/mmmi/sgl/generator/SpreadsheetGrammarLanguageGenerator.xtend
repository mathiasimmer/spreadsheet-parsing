/*
 * generated by Xtext
 */
package dk.sdu.mmmi.sgl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.Grammar
/*import java.util.List 
import java.util.ArrayList
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.Block
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.Rule
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.Column
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.ColumnDefinition
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.RowSpec
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.BlockSpec
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.MandatoryColumn
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.OptionalColumn
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.Syntax
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.SyntaxSeq
import org.eclipse.emf.common.util.EList
import java.util.HashMap
*/
/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class SpreadsheetGrammarLanguageGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		var tld = resource.allContents.head as Grammar
		var grammar =  (tld as Grammar);
		
		//resource.allContents.filter(typeof(Grammar)).forEach[compile(fsa)]
		//var base = new BaseCodeGen(grammar);
		var pyCode = new PyCodeGen(grammar);
		var jSCode = new JSCodeGen(grammar);
		
		fsa.generateFile("generated/py/Parser_"+grammar.name+".py", genParserPyFile(pyCode));
		fsa.generateFile("generated/js/Parser_"+grammar.name+".js", genParserJsFile(jSCode));
	}
	
	def genParserJsFile(JSCodeGen code) {
		code.generate;
	}
	
	def genParserPyFile(PyCodeGen code) { 
		
		code.generate;
	}
}
