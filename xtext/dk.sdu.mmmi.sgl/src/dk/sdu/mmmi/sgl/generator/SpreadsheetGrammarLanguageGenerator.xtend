/*
 * generated by Xtext 2.10.0
 */
package dk.sdu.mmmi.sgl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.Grammar

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SpreadsheetGrammarLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		var tld = resource.allContents.head as Grammar
		var grammar =  (tld as Grammar);
		
		//resource.allContents.filter(typeof(Grammar)).forEach[compile(fsa)]
		//var base = new BaseCodeGen(grammar);
		var pyCode = new PyCodeGen(grammar);
		var jSCode = new JSCodeGen(grammar);
		
		fsa.generateFile("generated/py/Parser_"+grammar.name+".py", genParserPyFile(pyCode));
		fsa.generateFile("generated/js/Parser_"+grammar.name+".js", genParserJsFile(jSCode));
	}
	
	def genParserJsFile(JSCodeGen code) {
		code.generate;
	}
	
	def genParserPyFile(PyCodeGen code) { 		
		code.generate;
	}
}
