/**
 * generated by Xtext
 */
package dk.sdu.mmmi.sgl.generator;

import dk.sdu.mmmi.sgl.generator.JSCodeGen;
import dk.sdu.mmmi.sgl.generator.PyCodeGen;
import dk.sdu.mmmi.sgl.spreadsheetGrammarLanguage.Grammar;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class SpreadsheetGrammarLanguageGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    EObject _head = IteratorExtensions.<EObject>head(_allContents);
    Grammar tld = ((Grammar) _head);
    Grammar grammar = ((Grammar) tld);
    PyCodeGen pyCode = new PyCodeGen(grammar);
    JSCodeGen jSCode = new JSCodeGen(grammar);
    String _name = grammar.getName();
    String _plus = ("generated/py/Parser_" + _name);
    String _plus_1 = (_plus + ".py");
    CharSequence _genParserPyFile = this.genParserPyFile(pyCode);
    fsa.generateFile(_plus_1, _genParserPyFile);
    String _name_1 = grammar.getName();
    String _plus_2 = ("generated/js/Parser_" + _name_1);
    String _plus_3 = (_plus_2 + ".js");
    CharSequence _genParserJsFile = this.genParserJsFile(jSCode);
    fsa.generateFile(_plus_3, _genParserJsFile);
  }
  
  public CharSequence genParserJsFile(final JSCodeGen code) {
    return code.generate();
  }
  
  public CharSequence genParserPyFile(final PyCodeGen code) {
    return code.generate();
  }
}
